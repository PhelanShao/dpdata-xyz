"use strict";var R=Object.create;var I=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var Q=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,G=Object.prototype.hasOwnProperty;var V=(g,e)=>{for(var r in e)I(g,r,{get:e[r],enumerable:!0})},L=(g,e,r,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Q(e))!G.call(g,i)&&i!==r&&I(g,i,{get:()=>e[i],enumerable:!(n=W(e,i))||n.enumerable});return g};var N=(g,e,r)=>(r=g!=null?R(q(g)):{},L(e||!g||!g.__esModule?I(r,"default",{value:g,enumerable:!0}):r,g)),J=g=>L(I({},"__esModule",{value:!0}),g);var te={};V(te,{activate:()=>K,deactivate:()=>ee});module.exports=J(te);var a=N(require("vscode")),v=N(require("path")),U=N(require("fs"));var E=N(require("fs")),S=N(require("path")),T=N(require("os")),Z=N(require("util")),H=require("child_process"),B=Z.promisify(H.exec),Y=class{static parseNpyHeader(e){try{if(e[0]!==147||e.toString("ascii",1,6)!=="NUMPY")throw new Error("Invalid NPY file: magic string missing");let r=e.readUInt8(6)+e.readUInt8(7)/10,n;r<2?n=e.readUInt16LE(8)+10:n=e.readUInt32LE(8)+12;let i=e.toString("ascii",10,n).trim(),t=i.match(/\'shape\':\s*\(([^\)]*)\)/),s=i.match(/\'descr\':\s*\'([^\']*)\'/),c=i.match(/\'fortran_order\':\s*(True|False)/);if(!t||!s||!c)throw new Error("Invalid NPY header format");let l=t[1].trim(),o=[];l.length&&(!l.includes(",")&&/^\d+$/.test(l)?o=[parseInt(l,10)]:o=l.split(/\s*,\s*/).filter(d=>d.trim().length>0).map(d=>parseInt(d.trim(),10)));let h=c[1]==="True";return{dtype:s[1],shape:o,fortranOrder:h,headerLength:n}}catch(r){throw console.error("Error parsing NPY header:",r),r}}static getDtypeSize(e){let r=e.match(/[<>|]?([a-zA-Z])(\d+)/);return r?(r[1]==="S"||r[1]==="U",parseInt(r[2],10)):4}static parseData(e,r,n,i){let t=[],s=this.getDtypeSize(n),c=n.charAt(n.length-1),l=n.charAt(0)==="<"||n.charAt(0)!==">"&&T.endianness()==="LE",o=Math.min(i,Math.floor((e.length-r)/s));o<i&&console.warn(`Buffer too small for expected data size. Expected ${i} elements, but can only read ${o}.`);for(let h=0;h<o;h++){let p=r+h*s;switch(c){case"f":s===4?t.push(l?e.readFloatLE(p):e.readFloatBE(p)):s===8&&t.push(l?e.readDoubleLE(p):e.readDoubleBE(p));break;case"i":if(s===1)t.push(e.readInt8(p));else if(s===2)t.push(l?e.readInt16LE(p):e.readInt16BE(p));else if(s===4)t.push(l?e.readInt32LE(p):e.readInt32BE(p));else if(s===8){let f=l?e.readBigInt64LE(p):e.readBigInt64BE(p);t.push(Number(f))}break;case"u":if(s===1)t.push(e.readUInt8(p));else if(s===2)t.push(l?e.readUInt16LE(p):e.readUInt16BE(p));else if(s===4)t.push(l?e.readUInt32LE(p):e.readUInt32BE(p));else if(s===8){let f=l?e.readBigUInt64LE(p):e.readBigUInt64BE(p);t.push(Number(f))}break;case"b":t.push(e.readUInt8(p)!==0?1:0);break;case"S":let d="";for(let f=0;f<s;f++){let m=e.readUInt8(p+f);if(m===0)break;d+=String.fromCharCode(m)}t.push(d);break;default:t.push(l?e.readFloatLE(p):e.readFloatBE(p))}}return t}static parseNpy(e){try{let{dtype:r,shape:n,fortranOrder:i,headerLength:t}=this.parseNpyHeader(e),s=n.reduce((l,o)=>l*o,1)||1;return{data:this.parseData(e,t,r,s),shape:n,dtype:r}}catch(r){throw console.error("Error parsing NPY data:",r),r}}static async isPythonWithNumpyAvailable(){try{return await B('python -c "import numpy"'),!0}catch{return!1}}static async createPythonScript(e){await E.promises.writeFile(e,`
import sys
import numpy as np

def convert_npy_to_text(npy_path, output_path=None):
    try:
        # Load the NPY file
        data = np.load(npy_path)
        
        # Determine output format based on shape
        if len(data.shape) == 1:
            # 1D array - each item on a separate line
            np.savetxt(output_path or sys.stdout, data, fmt='%s')
        elif len(data.shape) == 2:
            # 2D array - space-separated values, rows separated by newlines
            np.savetxt(output_path or sys.stdout, data, fmt='%s')
        else:
            # For higher dimensions, flatten and output space-separated
            flat_data = data.flatten()
            if output_path:
                with open(output_path, 'w') as f:
                    f.write(' '.join(map(str, flat_data)))
            else:
                print(' '.join(map(str, flat_data)))
    except Exception as e:
        sys.stderr.write(f"Error: {str(e)}\\n")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        sys.stderr.write("Usage: python script.py input.npy [output.txt]\\n")
        sys.exit(1)
    
    npy_path = sys.argv[1]
    output_path = sys.argv[2] if len(sys.argv) > 2 else None
    
    convert_npy_to_text(npy_path, output_path)
`)}static async parseNpyWithPython(e,r){let n=S.join(T.tmpdir(),"dpdata-xyz");await E.promises.mkdir(n,{recursive:!0});let i=S.join(n,"convert_npy.py");await this.createPythonScript(i);try{await B(`python "${i}" "${e}" "${r}"`)}catch(t){throw console.error("Error executing Python script:",t),new Error(`Failed to convert NPY file with Python: ${t}`)}}static async parseNpyToString(e){try{let r=await E.promises.readFile(e),n=this.parseNpy(r);if(n.shape.length===1)return n.data.join(`
`);if(n.shape.length===2){let i=[],[t,s]=n.shape;for(let c=0;c<t;c++){let l=[];for(let o=0;o<s;o++)l.push(n.data[c*s+o]);i.push(l.join(" "))}return i.join(`
`)}else return n.data.join(" ")}catch(r){if(console.warn("JavaScript NPY parsing failed, trying Python fallback:",r),await this.isPythonWithNumpyAvailable()){let n=S.join(T.tmpdir(),`temp_${Date.now()}.txt`);await this.parseNpyWithPython(e,n);let i=await E.promises.readFile(n,"utf-8");try{await E.promises.unlink(n)}catch(t){console.warn("Failed to delete temporary file:",t)}return i}else throw new Error(`Failed to parse NPY file: ${r}. Python with NumPy not available as fallback.`)}}static async convertNpyToTxt(e,r){try{let n=S.basename(e,".npy"),i=r||S.dirname(e),t=S.join(i,`${n}.txt`);if(await this.isPythonWithNumpyAvailable())await this.parseNpyWithPython(e,t);else{let c=await this.parseNpyToString(e);await E.promises.mkdir(i,{recursive:!0}),await E.promises.writeFile(t,c)}return t}catch(n){throw console.error("Error converting NPY to TXT:",n),new Error(`Failed to convert NPY to TXT: ${n}`)}}static async readRawFile(e){try{return(await E.promises.readFile(e,"utf-8")).trim().split(`
`).map(n=>n.trim())}catch(r){throw console.error("Error reading RAW file:",r),new Error(`Failed to read RAW file: ${r}`)}}static async processNpyFiles(e,r,n,i){let t={},s=i||S.dirname(e[0]);await E.promises.mkdir(s,{recursive:!0});let c=[];r&&(c=await this.readRawFile(r));let l=[];n&&(l=(await this.readRawFile(n)).map(p=>parseInt(p,10)));for(let h of e){let p=S.basename(h),d=await this.convertNpyToTxt(h,s);t[p]=d}let o=t["energy.npy"];if(c.length>0&&l.length>0&&o&&!t["real_atom_types.npy"]){let p=(await E.promises.readFile(o,"utf-8")).trim().split(`
`).length,f=l.map(u=>c[u]).join(" "),m=S.join(s,"real_atom_types.txt"),w=Array(p).fill(f).join(`
`);await E.promises.writeFile(m,w),t.real_atom_types=m}return t}};var z=N(require("fs")),_=N(require("path")),b=class{static async readFile(e){try{let n=(await z.promises.readFile(e,"utf-8")).trim().split(`
`),i=[];for(let t of n){let s=t.trim();if(s){let c=s.split(/\s+/);i.push(c)}}return i}catch(r){throw new Error(`Failed to read file ${e}: ${r}`)}}static async findPropertyFiles(e){try{let r=["real_atom_types","coord","energy","force","box"],n={};if(!z.existsSync(e))return n;let i=await z.promises.readdir(e);for(let t of r){let s=`${t}.txt`;i.includes(s)&&(n[t]=_.join(e,s))}for(let t of i)if(t.endsWith(".txt")){let s=t.replace(".txt","");n[s]||(n[s]=_.join(e,t))}return n}catch(r){return console.error("Error finding property files:",r),{}}}static getPropertyComponents(e,r){if(!e||e.length===0||e[0].length===0)return 0;let n=e[0].length;if(n%r===0){let t=n/r;if(t===1||t===3||t===9||t>0&&t<=12)return t}if(e.length>1&&e.every(s=>s.length===n)&&n<=10)return 0;let i=e[0].slice(0,Math.min(30,e[0].length)).map(t=>parseFloat(t)).filter(t=>!isNaN(t));if(i.length>0){let t=Math.min(...i),s=Math.max(...i);if(Math.abs(t)<1e3&&Math.abs(s)<1e3){let c=Math.round(n/r);if(Math.abs(n-r*c)/n<.1)return c}}for(let t of[3,1,9,6])if(Math.abs(n-r*t)/n<.1)return t;return 0}static validateDataConsistency(e,r,n,i={}){let t=e.length,s=[],c=[];r.length!==t&&c.push(`Mismatch in frame count: atomTypes (${t}) vs coordinates (${r.length})`),n.length!==t&&c.push(`Mismatch in frame count: atomTypes (${t}) vs energies (${n.length})`);for(let[o,h]of Object.entries(i))h.length!==t&&c.push(`Mismatch in frame count: atomTypes (${t}) vs ${o} (${h.length})`);let l={};for(let[o,h]of Object.entries(i))if(!(!h||h.length===0))try{let p=e[0].length,d=this.getPropertyComponents(h,p);l[o]=d,d>0?console.log(`\u5C5E\u6027 '${o}' \u63A8\u65AD\u4E3A\u6BCF\u539F\u5B50 ${d} \u4E2A\u5206\u91CF`):console.log(`\u5C5E\u6027 '${o}' \u63A8\u65AD\u4E3A\u5168\u5C40\u5C5E\u6027`)}catch(p){s.push(`\u65E0\u6CD5\u786E\u5B9A\u5C5E\u6027 '${o}' \u7684\u6027\u8D28: ${p}`),l[o]=0}for(let o=0;o<t;o++){if(o>=r.length||o>=e.length)continue;let h=e[o].length,p=h*3;r[o].length!==p&&c.push(`Frame ${o}: expected ${p} coordinates, but got ${r[o].length}`);for(let[d,f]of Object.entries(i)){if(!f||o>=f.length)continue;let m=l[d]||0;if(m>0){let w=h*m,u=f[o].length;if(u!==w){let y=Math.abs(u-w)/w*100;y<10?s.push(`Frame ${o}: ${d} \u957F\u5EA6\u4E3A ${u}\uFF0C\u4E0E\u9884\u671F\u7684 ${w} \u76F8\u5DEE ${y.toFixed(1)}%`):c.push(`Frame ${o}: expected ${w} ${d} values, but got ${u}`)}}}}if(s.length>0&&console.warn(`\u6570\u636E\u9A8C\u8BC1\u8B66\u544A:
`+s.join(`
`)),c.length>0)throw new Error(`Data consistency validation failed:
${c.join(`
`)}`);return!0}static generateXyzContent(e,r,n){let i=e.length,t=[];for(let s=0;s<i;s++){let c=e[s].length;if(s>=n.length)throw new Error(`Frame ${s}: Missing energy data`);if(t.push(`     ${c}`),t.push(` i = ${s}, E = ${n[s][0]}`),s>=r.length)throw new Error(`Frame ${s}: Missing coordinate data`);if(r[s].length!==c*3)throw new Error(`Frame ${s}: expected ${c*3} coordinates, but got ${r[s].length}`);for(let l=0;l<c;l++){if(l>=e[s].length)throw new Error(`Frame ${s}, Atom ${l}: Missing atom type data`);let o=e[s][l],h=l*3,p=(l+1)*3;if(p>r[s].length)throw new Error(`Frame ${s}, Atom ${l}: Incomplete coordinate data`);let d=r[s].slice(h,p);t.push(`${o} ${d.join(" ")}`)}}return t.join(`
`)}static generateExtXyzContent(e,r,n,i={},t="fff"){let s=e.length,c=[],l={};if(s>0){let o=e[0].length;for(let[h,p]of Object.entries(i)){if(p.length===0)continue;let d=this.getPropertyComponents(p,o);d>0?(l[h]={isPerAtom:!0,components:d},console.log(`'${h}' \u88AB\u786E\u5B9A\u4E3A\u6BCF\u539F\u5B50 ${d} \u5206\u91CF\u7684\u5C5E\u6027`)):(l[h]={isPerAtom:!1,components:0},console.log(`'${h}' \u88AB\u786E\u5B9A\u4E3A\u5168\u5C40\u5C5E\u6027`))}}for(let o=0;o<s;o++){let h=e[o].length;if(o>=n.length)throw new Error(`Frame ${o}: Missing energy data`);c.push(`${h}`);let p="Properties=species:S:1:pos:R:3";for(let[f,m]of Object.entries(l))m.isPerAtom&&i[f]&&o<i[f].length&&(p+=`:${f}:R:${m.components}`);p+=` energy=${n[o][0]}`;for(let[f,m]of Object.entries(l))if(!m.isPerAtom&&i[f]&&o<i[f].length){let w=i[f][o][0];w!==void 0&&(p+=` ${f}=${w}`)}let d="F F F";if(t==="box"&&i.box&&o<i.box.length){let f=i.box[o];f.length>=9&&(d=f.join(" "))}if(p+=` pbc="${d}"`,p+=` frame=${o}`,c.push(p),o>=r.length||r[o].length!==h*3)throw new Error(`Frame ${o}: Invalid coordinate data`);for(let f=0;f<h;f++){if(f>=e[o].length)throw new Error(`Frame ${o}, Atom ${f}: Missing atom type data`);let m=e[o][f],w=f*3,u=(f+1)*3;if(u>r[o].length)throw new Error(`Frame ${o}, Atom ${f}: Incomplete coordinate data`);let y=r[o].slice(w,u),F=`${m} ${y.join(" ")}`;for(let[x,O]of Object.entries(l))if(O.isPerAtom&&i[x]&&o<i[x].length)try{let D=i[x][o],P=O.components,j=f*P,k=j+P;if(k<=D.length){let A=D.slice(j,k);F+=` ${A.join(" ")}`}else console.warn(`Frame ${o}, Atom ${f}: ${x}\u6570\u636E\u4E0D\u8DB3\uFF0C\u8DF3\u8FC7`)}catch(D){console.warn(`\u5904\u7406\u5C5E\u6027 ${x} \u65F6\u51FA\u9519: ${D}`)}c.push(F)}}return c.join(`
`)}static async generateXyz(e,r,n,i){try{let t=await this.readFile(e),s=await this.readFile(r),c=await this.readFile(n);this.validateDataConsistency(t,s,c);let l=this.generateXyzContent(t,s,c),o=i||_.join(_.dirname(e),`output_${Date.now()}.xyz`);return await z.promises.writeFile(o,l),o}catch(t){throw new Error(`Failed to generate XYZ file: ${t}`)}}static async generateExtXyz(e,r,n,i,t,s="fff",c,l=!1){try{let o=await this.readFile(e),h=await this.readFile(r),p=await this.readFile(n),d={};if(i&&z.existsSync(i)&&(d.force=await this.readFile(i)),t&&z.existsSync(t)&&(d.box=await this.readFile(t)),l){console.log("\u67E5\u627E\u989D\u5916\u5C5E\u6027\u6587\u4EF6...");let w=_.dirname(e),u=await this.findPropertyFiles(w);for(let[y,F]of Object.entries(u))if(!(y==="real_atom_types"||y==="coord"||y==="energy"||y==="force"&&i||y==="box"&&t))try{d[y]=await this.readFile(F),console.log(`\u52A0\u8F7D\u989D\u5916\u5C5E\u6027: ${y} \u4ECE ${F}`)}catch(x){console.warn(`\u52A0\u8F7D\u5C5E\u6027\u6587\u4EF6 ${F} \u5931\u8D25: ${x}`)}}this.validateDataConsistency(o,h,p,d);let f=this.generateExtXyzContent(o,h,p,d,s),m=c||_.join(_.dirname(e),`output_${Date.now()}.extxyz`);return await z.promises.writeFile(m,f),m}catch(o){throw new Error(`Failed to generate ExtXYZ file: ${o}`)}}};var X=N(require("fs")),$=N(require("path"));var M=class{static async findSetDirectories(e){try{let r=await X.promises.readdir(e,{withFileTypes:!0}),n=[];for(let i of r)i.isDirectory()&&i.name.match(/^set\.\d+$/)&&n.push($.join(e,i.name));return n}catch(r){throw new Error(`Failed to find set directories in ${e}: ${r}`)}}static async findNpyFiles(e){try{let r=await X.promises.readdir(e,{withFileTypes:!0}),n={};for(let i of r)if(i.isFile()&&i.name.endsWith(".npy")){let t=$.basename(i.name,".npy");n[t]=$.join(e,i.name)}return n}catch(r){throw new Error(`Failed to find NPY files in ${e}: ${r}`)}}static async findRawFiles(e){try{let r=await X.promises.readdir(e,{withFileTypes:!0}),n={};for(let i of r)if(i.isFile()&&i.name.endsWith(".raw")){let t=$.basename(i.name,".raw");n[t]=$.join(e,i.name)}return n}catch(r){throw new Error(`Failed to find RAW files in ${e}: ${r}`)}}static async processSetDirectory(e,r,n,i){try{let t=i||$.join(e,"txt_output");await X.promises.mkdir(t,{recursive:!0});let s=await this.findNpyFiles(e),c=Object.values(s);if(c.length===0)throw new Error(`No NPY files found in ${e}`);return await Y.processNpyFiles(c,r,n,t)}catch(t){throw new Error(`Failed to process set directory ${e}: ${t}`)}}static async processDpDataDirectory(e,r="xyz",n="fff"){try{let i=await this.findRawFiles(e),t=i.type_map||"",s=i.type||"";if(!t&&!s)throw new Error(`No type_map.raw or type.raw files found in ${e}`);let c=await this.findSetDirectories(e);if(c.length===0)throw new Error(`No set.XXX directories found in ${e}`);let l={};for(let o of c){let h=$.basename(o),p=$.join(e,`${h}_txt_output`),d=await this.processSetDirectory(o,t,s,p),f="";if(d.real_atom_types)f=d.real_atom_types;else if(X.existsSync($.join(p,"real_atom_types.txt")))f=$.join(p,"real_atom_types.txt");else throw new Error(`real_atom_types.txt not found for ${o}`);let m={atomTypes:f,coordinates:d["coord.npy"]||"",energies:d["energy.npy"]||""};if(!m.coordinates||!m.energies)throw new Error(`Missing required files for ${o}`);let w={forces:d["force.npy"]||"",box:d["box.npy"]||""},u=$.join(e,`${h}.${r==="extxyz-full"?"extxyz":r}`);if(r==="xyz"){let y=await b.generateXyz(m.atomTypes,m.coordinates,m.energies,u);l[h]=y}else if(r==="extxyz"){let y=await b.generateExtXyz(m.atomTypes,m.coordinates,m.energies,w.forces,w.box,n,u,!1);l[h]=y}else if(r==="extxyz-full"){let y=await b.generateExtXyz(m.atomTypes,m.coordinates,m.energies,w.forces,w.box,n,u,!0);l[h]=y}}return l}catch(i){throw new Error(`Failed to process dpdata directory ${e}: ${i}`)}}};function K(g){console.log("DPData-XYZ extension is now active!");let e=a.commands.registerCommand("dpdata-xyz.generateXyzFromNpy",async s=>{try{if(!s){a.window.showErrorMessage("No file selected");return}let c=s.fsPath,l=v.dirname(c),o=v.dirname(l),h=v.basename(l),p=await M.findRawFiles(o),d=p.type_map||"",f=p.type||"";if(!d&&!f){a.window.showErrorMessage(`No type_map.raw or type.raw files found in ${o}`);return}let m=await M.findNpyFiles(l),w=await a.window.showQuickPick(["xyz","extxyz","extxyz-full"],{placeHolder:"Select output format"}),u="fff";(w==="extxyz"||w==="extxyz-full")&&(u=await a.window.showQuickPick(["box","fff"],{placeHolder:"Select PBC option for periodic boundary conditions"}));let y=v.join(o,`${h}.${w==="extxyz-full"?"extxyz":w}`);a.window.withProgress({location:a.ProgressLocation.Notification,title:`Generating ${w.toUpperCase()} file`,cancellable:!1},async F=>{F.report({increment:0,message:"Converting NPY to text..."});try{let x=v.join(l,"temp_txt_output");await U.promises.mkdir(x,{recursive:!0});let O=Object.values(m),D=await Y.processNpyFiles(O,d,f,x);F.report({increment:50,message:"Generating XYZ file..."});let P={atomTypes:D.real_atom_types||v.join(x,"real_atom_types.txt"),coordinates:D["coord.npy"]||"",energies:D["energy.npy"]||""};if(!P.coordinates||!P.energies)throw new Error(`Missing required files in ${l}. Need coord.npy and energy.npy.`);let j={forces:D["force.npy"]||"",box:D["box.npy"]||""},k="";w==="xyz"?k=await b.generateXyz(P.atomTypes,P.coordinates,P.energies,y):w==="extxyz"?k=await b.generateExtXyz(P.atomTypes,P.coordinates,P.energies,j.forces,j.box,u,y,!1):w==="extxyz-full"&&(k=await b.generateExtXyz(P.atomTypes,P.coordinates,P.energies,j.forces,j.box,u,y,!0)),F.report({increment:100,message:"Completed!"});try{await U.promises.rm(x,{recursive:!0,force:!0})}catch(C){console.error("Error cleaning up temporary files:",C)}if(a.window.showInformationMessage(`Successfully generated ${v.basename(k)}`),await a.window.showQuickPick(["Yes","No"],{placeHolder:"Open the generated file?"})==="Yes"){let C=await a.workspace.openTextDocument(k);await a.window.showTextDocument(C)}}catch(x){a.window.showErrorMessage(`Error generating ${w.toUpperCase()}: ${x}`)}})}catch(c){a.window.showErrorMessage(`Error processing file: ${c}`)}}),r=a.commands.registerCommand("dpdata-xyz.parseNPY",async s=>{try{let c;if(s)c=s.fsPath;else{let l=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!0,filters:{"NPY Files":["npy"]},title:"Select NPY Files"});if(!l||l.length===0)return;let o=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"RAW Files":["raw"]},title:"Select type_map.raw File"});if(!o||o.length===0){a.window.showErrorMessage("Type map file is required");return}let h=o[0].fsPath,p=await a.window.showQuickPick(["Yes","No"],{placeHolder:"Do you want to provide a type.raw file?"}),d;if(p==="Yes"){let w=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"RAW Files":["raw"]},title:"Select type.raw File"});w&&w.length>0&&(d=w[0].fsPath)}let f=await a.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,title:"Select Output Directory"});if(!f||f.length===0){a.window.showErrorMessage("Output directory is required");return}let m=f[0].fsPath;a.window.withProgress({location:a.ProgressLocation.Notification,title:"Processing NPY Files",cancellable:!1},async w=>{w.report({increment:0});let u=l.map(x=>x.fsPath),y=await Y.processNpyFiles(u,h,d,m);w.report({increment:100}),a.window.showInformationMessage(`Successfully processed ${u.length} NPY files`),await a.window.showQuickPick(["Yes","No"],{placeHolder:"Open output directory?"})==="Yes"&&a.commands.executeCommand("vscode.openFolder",a.Uri.file(m),{forceNewWindow:!0})})}}catch(c){a.window.showErrorMessage(`Error processing NPY files: ${c}`)}}),n=a.commands.registerCommand("dpdata-xyz.generateXYZ",async()=>{try{let s=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select real_atom_types.txt File"});if(!s||s.length===0)return;let c=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select coord.txt File"});if(!c||c.length===0)return;let l=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select energy.txt File"});if(!l||l.length===0)return;let o=await a.window.showSaveDialog({defaultUri:a.Uri.file(v.join(v.dirname(s[0].fsPath),"output.xyz")),filters:{"XYZ Files":["xyz"]},title:"Save XYZ File As"});if(!o)return;a.window.withProgress({location:a.ProgressLocation.Notification,title:"Generating XYZ File",cancellable:!1},async h=>{h.report({increment:0});let p=await b.generateXyz(s[0].fsPath,c[0].fsPath,l[0].fsPath,o.fsPath);if(h.report({increment:100}),a.window.showInformationMessage(`Successfully generated XYZ file: ${v.basename(p)}`),await a.window.showQuickPick(["Yes","No"],{placeHolder:"Open the generated XYZ file?"})==="Yes"){let f=await a.workspace.openTextDocument(p);await a.window.showTextDocument(f)}})}catch(s){a.window.showErrorMessage(`Error generating XYZ file: ${s}`)}}),i=a.commands.registerCommand("dpdata-xyz.generateExtXYZ",async()=>{try{let s=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select real_atom_types.txt File"});if(!s||s.length===0)return;let c=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select coord.txt File"});if(!c||c.length===0)return;let l=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select energy.txt File"});if(!l||l.length===0)return;let o=await a.window.showQuickPick(["Yes","No"],{placeHolder:"Include forces data?"}),h;o==="Yes"&&(h=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select force.txt File"}));let p=await a.window.showQuickPick(["Yes","No"],{placeHolder:"Include box data?"}),d;p==="Yes"&&(d=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text Files":["txt"]},title:"Select box.txt File"}));let m=await a.window.showQuickPick(["Standard","Full (include all properties)"],{placeHolder:"Select ExtXYZ format type"})==="Full (include all properties)",w=await a.window.showQuickPick(["box","fff"],{placeHolder:"Select PBC option"}),u=await a.window.showSaveDialog({defaultUri:a.Uri.file(v.join(v.dirname(s[0].fsPath),"output.extxyz")),filters:{"ExtXYZ Files":["extxyz"]},title:"Save ExtXYZ File As"});if(!u)return;a.window.withProgress({location:a.ProgressLocation.Notification,title:"Generating ExtXYZ File",cancellable:!1},async y=>{y.report({increment:0});let F=await b.generateExtXyz(s[0].fsPath,c[0].fsPath,l[0].fsPath,h?h[0].fsPath:void 0,d?d[0].fsPath:void 0,w,u.fsPath,m);if(y.report({increment:100}),a.window.showInformationMessage(`Successfully generated ExtXYZ file: ${v.basename(F)}`),await a.window.showQuickPick(["Yes","No"],{placeHolder:"Open the generated ExtXYZ file?"})==="Yes"){let O=await a.workspace.openTextDocument(F);await a.window.showTextDocument(O)}})}catch(s){a.window.showErrorMessage(`Error generating ExtXYZ file: ${s}`)}}),t=a.commands.registerCommand("dpdata-xyz.processDirectory",async s=>{try{let c;if(s)c=s.fsPath;else{let d=await a.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,title:"Select DPData Directory"});if(!d||d.length===0)return;c=d[0].fsPath}if(!(await U.promises.stat(c)).isDirectory()){a.window.showErrorMessage("Selected path is not a directory");return}let l=await M.findRawFiles(c);if(!l.type_map&&!l.type){a.window.showErrorMessage("No type_map.raw or type.raw files found in the selected directory");return}if((await M.findSetDirectories(c)).length===0){a.window.showErrorMessage("No set.XXX directories found in the selected directory");return}let h=await a.window.showQuickPick(["xyz","extxyz","extxyz-full"],{placeHolder:"Select output format"}),p="fff";(h==="extxyz"||h==="extxyz-full")&&(p=await a.window.showQuickPick(["box","fff"],{placeHolder:"Select PBC option"})),a.window.withProgress({location:a.ProgressLocation.Notification,title:"Processing DPData Directory",cancellable:!1},async d=>{d.report({increment:0,message:"Starting processing..."});try{let f=await M.processDpDataDirectory(c,h,p);d.report({increment:100,message:"Processing complete"});let m=Object.keys(f).length;a.window.showInformationMessage(`Successfully processed ${m} sets in the DPData directory`);let w=Object.entries(f).map(([y,F])=>({label:y,description:F})),u=await a.window.showQuickPick(w,{placeHolder:"Select a file to open",title:"Generated Files"});if(u){let y=await a.workspace.openTextDocument(u.description);await a.window.showTextDocument(y)}}catch(f){a.window.showErrorMessage(`Error during processing: ${f}`)}})}catch(c){a.window.showErrorMessage(`Error processing DPData directory: ${c}`)}});g.subscriptions.push(e,r,n,i,t)}function ee(){}0&&(module.exports={activate,deactivate});
